#summary Overview of DSL features of Scardf

  Note: _This page describes the new `org.scardf` API. The old API is described [Overview here]._

== Defining a vocabulary ==

You can define values in an `object` to define your vocabulary and the basic ontology:
{{{
object PeopleVocabulary extends Vocabulary( "http://person.eg#" ) {
  val Person = รท( "Person" )
  val Hobby = รท( "Hobby" )
  val Swimming = รท( "Swimming" )
  val Science = รท( "Science" )
  val likes = prop( "Likes" )
  val isMale = prop( "IsMale" )
  val height = propInt( "Height" )
}
}}}

== Building a graph ==

An RDF graph is constructed using nested expressions:
{{{
val john = UriRef( "http://doe.eg#john" )
val g = Graph.build( john -( 
  RDF.Type -> Person,
  isMale -> true,
  name -> Branch( given -> "John", family -> "Doe" ),
  height -> 167, 
  likes -> ObjSet( Swimming, Science )
) )
}}}

== Traversing a graph ==

A graph can be traversed with a slash operator forming an XPath-like expressions:
{{{
john/name/given
}}}

These yield a bag of RDF node objects. If you expect a single string, you append the `asString` converter object:
{{{
john/name/given/asString == "John"
}}}

Converters also have modifiers which yield collections of Scala objects:
{{{
john/likes/asNode.set == Set( Swimming, Science )
}}}