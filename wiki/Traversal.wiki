#summary API for traversing a RDF graph

Reading a property from a RDF resource is simple:
{{{
Given( Name( jdoe ) ) == Lit( "John" )
}}}

Another way is with a slash operator, like in XPath. You can connect these operations to form a path expression:
{{{
jdoe/Name/Given
}}}

This actually gives you a bag of RDF node objects, which may be empty, or a single node, or multiple nodes. To convert a node list to a string, you use the same slash operator, but now with a converter:
{{{
jdoe/Name/Given/asString == "John"
}}}

There are other converters for other types of literals:
{{{
jdoe/IsMale/asBoolean == true
jdoe/Height/asInt == 167
jdoe/Birthday/asLocalDate == new LocalDate( 1977, 7, 27 )
}}}

Single-node convertors work only on single-item bags, those that contain exactly one node (in this case a literal convertible to string), and throw exceptions in any other case. But you can construct converters that return options or default values from any single-node converter:
{{{
jdoe/Spouse/asRes.option == None
jdoe/Weight/asInt.default( 100 ) == 100
}}}

If you expect results of different cardinalities, you can manipulate a slash-operator result as a collection of RDF nodes. 
{{{
( anna/Spouse ).isEmpty
for ( r <- jdoe/Likes ) println( r )
}}}

There are also converter modifiers that return collections of specific Scala objects from contained nodes. Adding a `.set` modifier returns a set of nodes instead of a single node:
{{{
jdoe/Likes/asRes.set == Set( Swimming, Science )
}}}

Boolean expressions in Scardf can have in different forms, to appear as natural as possible. Following expressions all return `true`:
{{{
jdoe/IsMale?
jdoe has Height -> 167
jdoe( Likes -> Science )?
}}}

If the slash operator returns an empty node list at any point, the whole expression will yield an empty bag - no exception is thrown:
{{{
( anna/Spouse/Name/Family ).isEmpty
}}}

Another type you can use with a slash operator is a language extractor, useful for multilingual literals:
{{{
jdoe/Title/Lang.en
}}}
