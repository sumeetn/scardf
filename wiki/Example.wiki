#summary Example graph containing data to be manipulated with example code elsewhere on this wiki

{{{
import NodeConverter._

object PeopleVoc extends Vocabulary( "http://person.eg#" ) {
  val person = ÷( "Person" )
  val hobby = ÷( "Hobby" )
  val swimming = ÷( "Swimming" )
  val science = ÷( "Science" )
  val name = ÷( "name" )
  val given = ÷( "given" )
  val family = ÷( "family" )
  val isMale = ÷( "isMale" )
  val height = ÷( "height" )
  val weight = ÷( "weight" )
  val likes = ÷( "likes" )
  val spouse = ÷( "spouse" )
  val children = ÷( "children" )
  val birthday = ÷( "birthday" )
  val age = ÷( "age" )
}
}}}

Defining a graph with 

{{{
import PeopleVoc._

object Doe extends Vocabulary( "http://doe.eg#" ) {
  val List( anna, bob, john, jane ) = 
    List( 'anna, 'bob, 'john, 'jane ) map { this÷_ }

  // shortcut pairs for describing type and gender
  private val aPerson = RDF.Type -> person
  private val aMale = isMale -> true
  private val aFemale = isMale -> false

  private val basegraph = Graph.build(
    anna -( aPerson, aFemale, 
      name -> Branch( given -> "Anna" ), height -> 107, birthday -> "2004-04-14",
      likes -> swimming
    ),
    bob -( aPerson, aMale, 
      name -> Branch( given -> "Bob" ), height -> 99, birthday -> "2007-05-18"
    ),
    john -( aPerson, aMale, 
      name -> Branch( given -> "John" ), height -> 167, birthday -> "1977-07-27",
      likes -> ObjSet( swimming, science ), 
      children -> List( anna, bob ), spouse -> jane
    ),
    jane -( aPerson, aFemale, 
      name -> Branch( given -> "Jane" ), height -> 150, birthday -> "1976-06-26",
      likes -> swimming, 
      children -> List( anna, bob ), spouse -> john
    )
  )
  
  // adding last name "Doe" to each name in the basegraph yields the complete graph
  val graph = Augment add { _ -family-> "Doe" } forEach { _/-/name } on basegraph
}
}}}
