#labels Deprecated
@@NOTE: NOT YET IN SOURCE REPOSITORY


= Filtering triples =

= Scala pattern matching =



== triplesMatch method ==

{{{
g.triplesMatch{
  case Triple( `anna`, `height`, _ ) => true
}
}}}


{{{
g.triplesMatch{
  case Triple( _, `height`, h: Literal ) if ( asInt(h) < 100 ) => true
}
}}}

== triplesLike method ==

As a shortcut, you can use a three-parameter `triplesLike` function. Parameters match the subject, predicate and object part of the triple, in that order. If you put in a specific node, it will allow only triples with that node in specified place. You can also use a companion object `Node` to match any node in that place. So, expression like this:

{{{
g.triplesLike( anna, height, Node )
}}}

yields a collection of only one triple: (anna, height, 107).

Companion objects `SubjectNode`, `UriRef`, `Literal` and `Blank` are used for matching subclasses of Node. Scala value object may also be used, if they can be successfully converted to a literal.

Every argument can also be a function of type Node => Boolean. This expression filters all triples stating that someone's height is under 100 cm:

{{{
g.triplesLike( Node, height, { h: Literal => asInt(h) < 100 } )
}}}

which is an iterable with only one triple: (bob, height, 99).