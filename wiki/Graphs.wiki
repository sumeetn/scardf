#labels Deprecated
@@NOTE: NOT YET IN SOURCE REPOSITORY


= Filtering triples =



== Scala pattern matching ==

Scala's `match` method

In this example we filter out all triples in graph `g` in the form _:anna :height ?x_

{{{
g.triples filter {
  _ match {
    case Triple( `anna`, `height`, _ ) => true
    case _ => false
  }
}
}}}


== `triplesMatching` method ==

You can use Scala pattern matching in a more convenient form, like this:
{{{
g.triplesMatching{
  case Triple( `anna`, `height`, _ ) => true
}
}}}

The `triplesMatching` method includes a `case _ => false` clause

This expression filters all triples stating that someone's height is under 100 cm:

{{{
g.triplesMatching{
  case Triple( _, `height`, h: Literal ) => asInt(h) < 100
}
}}}


== `triplesLike` method ==

Even more concise is the `triplesLike` method. Its parameters match the subject, predicate and object part of the triple, in that order. If you put in a specific node, it will allow only triples with that node in specified place. You can also use a companion object `Node` to match any node in that place. So, the first example would go like this:

{{{
g.triplesLike( anna, height, Node )
}}}

Companion objects `SubjectNode`, `UriRef`, `Literal` and `Blank` are used for matching subclasses of Node. Scala value object may also be used, if they can be successfully converted to a literal. Every argument can also be a function of type `Node => Boolean`, as seen in the second example:

{{{
g.triplesLike( Node, height, { h: Literal => asInt(h) < 100 } )
}}}