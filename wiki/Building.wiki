#summary Constructing an RDF graph using Scardf


Model is constructed as a Scala object in Scardf. If you give it a prefix, all resources will prepend this string in their URIs.
{{{
new Model withPrefix "http://family.eg#"
}}}

Resources are created from the model, using alternative expressions like these:  
{{{
model.getRes( "jdoe" )
Res( "jdoe" )( model )
}}}

You can avoid repeating the reference to the model with implicit values:
{{{
implicit val model = new Model withPrefix "http://family.eg#"
val jdoe = Res( "jdoe" )
}}}

Adding statements to the model is easy, just call method `state` on a subject. Assigned objects 
may be RDF nodes, but also some Scala objects, such as Strings, Ints, Booleans...
{{{
jdoe state Height -> 167
}}}

You can assign multiple properties in one `state` method, or even multiple values for the same property:
{{{
jdoe state( IsMale -> true, Likes -> Swimming, Likes -> Science )
}}}

Assigning multiple values can be shortened using a case class `All`:
{{{
jdoe state Likes -> All( Swimming, Science )
}}}

You can nest other RDF nodes with their own statements, including anonymous (blank) nodes:
{{{
jdoe state(
  Name -> Anon(
    Given -> "John",
    Family -> "Doe"
  ),
  Spouse -> Res( "jane" ).state( Spouse -> jdoe )
)
}}}

A more deliberate example of graph building can be found at the [ExampleData] page.

