#labels Deprecated
Identifier declaration is simple:

{{{
on( GET /PT.Element/PT.symbol ) {
  describeSingle( elementDetails )
}
}}}

It says something like this:
  On every GET request matching the pattern /element/<symbol>, describe a single domain concept with these properties, using the `elementDetails` predicate tree.

First we'll need a *domain graph* in which we describe some properties of these concepts.
{{{
pt:Element rdf:Type   rdfs:Class ,
           :uriLabel  "element" .
pt:symbol  rdf:Type   rdf:Property ,
           rdfs:range xsd:string .
}}}

Let's test this pattern with URI path `/element/Si` (silicon).

Since the first pattern segment is described in the domain graph as an RDF resource of type `rdfs:Class`, it is cast as a "set type" segment. This means that the tested path segment should match the URI label property of the pattern ("element"), which it does. This segments adds a statement `_:fc rdf:type pt:Element` to the identity graph.

Second pattern segment is an `rdf:Property`, making it a "property value" segment. These check path segments according to their range. In this case, the range is `xsd:string` which allows any value. This segments adds a statement `_:fc pt:symbol "Si"` to the identity graph.

{{{
_:fc rdf:type  pt:Element ;
     pt:symbol "Si" .
}}}

This pattern graph is used to construct a SPARQL query:

{{{
SELECT ?fc
WHERE {
  ?fc rdf:type pt:Element;
      pt:symbol "Si" .
}
}}}