#summary Overview of DSL features of Scardf

== Defining a vocabulary ==

You can define values in an `object` to define your vocabulary and the basic ontology:
{{{
object PeopleVocabulary extends Vocabulary( "http://person.eg#" ) {
  val Person = รท( "Person" )
  val Hobby = รท( "Hobby" )
  val Swimming = รท( "Swimming" )
  val Science = รท( "Science" )
  val Likes = prop( "Likes" )
  val IsMale = prop( "IsMale" )
  val Height = propInt( "Height" )
}
}}}

== [Building] a graph ==

You can add statements to the model using a Scala assignment, or a method named `state`:
{{{
Height( john ) = 167
john state( IsMale -> true, Likes -> (Swimming, Science) )
}}}

An RDF graph is constructed using nested expressions:
{{{
val john = UriRef( "http://doe.eg#john" )
val g = Graph.build( john -( 
  RDF.Type -> Person,
  IsMale -> true,
  name -> Branch( given -> "John", family -> "Doe" ),
  height -> 167, 
  likes -> ObjSet( swimming, science )
) )
}}}

== [Traversal Traversing] a graph ==

A graph can be traversed with a slash operator forming an XPath-like expressions:
{{{
john/Name/Given
}}}

These yield a bag of RDF node objects. If you expect a single string, you append the `asString` converter object:
{{{
john/Name/Given/asString == "John"
}}}

Converters also have modifiers which yield collections of Scala objects:
{{{
john/Likes/asRes.set == Set( Swimming, Science )
}}}
